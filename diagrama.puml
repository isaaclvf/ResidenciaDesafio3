@startuml

package Model #feb40f {
class "Agendamento" as ag {
+CpfDoPaciente
+DataDaConsulta
+HoraInicial
+HoraFinal
}
class agb as "AgendamentoBuilder"{
Valida dados de Agendamento
}
class pc as "Paciente" {
+Cpf
+Nome
+DataDeNascimento
}
class pcb as "  PacienteBuilder  " {
Valida dados de Paciente
}

class "Consultorio" as c {

        +AddPaciente(Paciente): bool

        +DeletePaciente(Paciente): bool

        +GetAllPacientes(): IEnumerable<Paciente> 

        +AddAgendamento(Agendamento): bool

        +DeleteAgendamento(ulong, DateTime, ushort): bool

        +GetAllAgendamentos(): IEnumerable<Agendamento> 
}

}

package Controller #7FFF00 {

class "MainController" as mc {
}

class "AgendamentoController" as agc {
Recebe os dados de AgendamentoView e os envia para 
função correspondente na camada de Dados 
+AgendarConsulta()
+CancelarConsulta()
+GetAgendamentos()
}
class pcc as "PacienteController" {
Recebe os dados de PacienteView e os envia para 
função correspondente na camada de Dados 
+IncluirPaciente()
+ExcluirPaciente()
+GetPacientes()
}
}

package View #D84437 {

class "PacienteView" as pv {
Interage com o usuário para realizar as 
funcionalidades referentes a classe Paciente
+CadastrarPaciente()
+ExcluirPaciente()
+ListarPacientesPorCpf()
+ListarPacientesPorNome()
}

class "AgendamentoView" as av {
Interage com o usuário para realizar as 
funcionalidades referentes a classe Agendamento
+AgendarConsulta()
+CancelarAgendamento()
+ListarAgendaInteira()
+ListarAgendaParcial()
}

class "UserInterface" as ui {
Interage com o usuário por meio do console
+Start()
}
}

package Data #F9E4BC {

interface "IConsultorioDao" as icd {}

interface "IPacienteDao" as ipd {
Métodos Públicos para a manipulação dos Pacientes

        +AddPaciente(Paciente): bool

        +DeletePaciente(Paciente): bool

        +GetAllPacientes(): IEnumerable<Paciente> 

        +CpfExists(ulong): bool

        +GetPacienteByCpf(ulong): Paciente 
}

interface "IAgendamentoDao" as iad {
Métodos Públicos para a manipulação dos Agendamentos

        +AddAgendamento(Agendamento): bool

        +DeleteAgendamento(ulong, DateTime, ushort): bool

        +GetAllAgendamentos(): IEnumerable<Agendamento> 

        +DeleteAllAgendamentosFromPaciente(Paciente): bool

        +IsAgendamentoCadastrado(Agendamento): bool
}


package Persistent {

class "EntityConsultorio" as ce {
}
class "EntityContext" as cc {
Implementa a persistência pelo framework Entity
} 
}

package NonPersistent {

class "DefaultConsultorio" as dc {
}

class "DefaultContext" as dcc {
objeto Singleton que mantém o contexto dos dados.
**É necessário para que PacienteDao e AgendamentoDao
tenham acesso aos mesmos dados**
}

}

pcb o-down- pc
agb o-down- ag


dcc "1" *-- "n" pc
dcc "1" *-- "n" ag
cc "1" *-- "n" pc
cc "1" *-- "n" ag


pv *--  pcb
av *-- agb

c *-down- icd

icd <-- dc
icd <-- ce

dc *-- dcc
ce *-- cc

pcc o-down- c
agc o-down- c

mc *-up- ui
mc *-down- pcc
mc *-down- agc
mc *-up- av
mc *-up- pv

ipd <-down- icd
iad <-down- icd



@enduml